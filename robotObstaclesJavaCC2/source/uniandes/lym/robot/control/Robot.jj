/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN: /* Nombres de Comandos */
{
  <MOV:  "Mov">
| <RIGHT: "RIGHT">
| <PUT: "Put">
| <PICK: "Pick">
| < POP: "Pop" >
| <GO: "GO" >
| < HOP:  "HOP" >		

}

TOKEN:
{
  < ASSIGNTO : "assignTo">
| < GOTO : "goto">
| < MOVE: "move" >
| < TURN: "turn">
| < FACE: "face">
| < PUTC: "put">
| < PICKC: "pick">
| < MOVETOTHE: "moveToThe">
| < MOVEINDIR: "moveInDir">
| < JUMPTOTHE: "jumpToThe">
| < JUMPINDIR: "jumpInDir">
| < NOP: "nop" >
}

TOKEN:
{
  < FACING: "facing">
| < CANPUT: "canPut">
| < CANPICK: "canPick">
| < CANMOVEINDIR: "canMoveInDir">
| < CANJUMPINDIR: "canJumpInDir">
| < CANMOVETOTHE: "canMoveToThe">
| < CANJUMPTOTHE: "canJumpToThe">
}

TOKEN:
{
  <BALLOONS:  "balloons" >
| <CHIPS:     "chips"  >
}


TOKEN:
{
  < IF : "if">
| < THEN : "then" >
| < ELSE : "else" >

| < WHILE : "while">
| < DO : "do" >

| < REPEATTIMES: "repeat">
}

TOKEN:
{
  < NOT: "not">
}


TOKEN:
{
  < LP: "(" >
| < RP: ")" >
| < LB: "[" >
| < RB: "]" >
| < DP: ":" >
| < COMA: "," >
| < SC: ";" >
| < PAM: "|" >
//| < SPACE: " " >
}

TOKEN:
{
  < LEFT: "left" >
| < RIGHTD: "right" >
| < AROUND: "around" >
| < NORTH: "north" >
| < SOUTH: "south" >
| < WEST: "west" >
| < EAST: "east" >
| < FRONT: "front" >
| < BACK: "back" >
}

TOKEN :
{
  < NUM: (<DIGIT>)+ >
| < #DIGIT: ["0"-"9"] >
| < WORD: (< LETTER >)+ >
| < #LETTER: ["a"-"z"]|["A"-"Z"] >
}



	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		String dir;
		salida=new String();	
	}

	
	{
		(
		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
	    | < ASSIGNTO >":"x=num()","< WORD >
	    | < GOTO > ":" quantity() "," quantity()
	    | < MOVE >":"quantity()
	    | < TURN > ":" dir=direction() {world.turn(dir);salida = "Command: Turn";}
	    | < FACE >":" cardinal()
	    | < PUTC >":"quantity()","object()
	    | < PICKC >":"quantity()","object()
	    | < MOVETOTHE >":"quantity()","direccion2()
	    | < MOVEINDIR >":"quantity()","cardinal()
	    | < JUMPTOTHE >":"quantity()","direccion2()
	    | < JUMPINDIR >":"quantity()","cardinal()
	    | < NOP >

	    | < FACING >":"cardinal()
	    | < CANPUT >":"quantity()","object()
	    | < CANPICK >":"quantity()","object()
	    | < CANMOVEINDIR >":"quantity()","cardinal()
	    | < CANJUMPINDIR >":"quantity()","cardinal()
	    | < CANMOVETOTHE >":"quantity()","direccion2()
	    | < CANJUMPTOTHE >":"quantity()","direccion2()

	    | < WORD >":"(comando()|< NUM >|< WORD >)+

	    | < IF >":"(condition()|not()|< NUM >|< WORD >|opciones())+<THEN >":"(comando()|< NUM >|< WORD >)+< ELSE >":"(comando()|< NUM >|< WORD >)+ 
	    | < WHILE >(condition()|not()|< NUM >|< WORD >|opciones())+ < DO >(comando()|< NUM >|< WORD >)+
	    | < REPEATTIMES >":"quantity()(comando()|< NUM >|< WORD >)+

		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void opciones():
	{
	}
	{
	  ("&&"|"||"|"!")
	}

	void quantity():
	{
	}
	{
	  (num()|< WORD >)
	}

	void object():
	{
	}
	{
	  (< BALLOONS >|< CHIPS >)
	}

	String direction():
	{
	 String dir = "";
	}
	{
	  (	    < AROUND >|< LEFT >|< RIGHTD >
	  )
	  {
			try 
			{
				dir = (token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return dir;
		}
	}

	void cardinal():
	{
	}
	{
	  (	    < NORTH >|< SOUTH >|< WEST >|< EAST >
	  )
	}

	void direccion2():
	{
	}
	{
	  (
	    < FRONT >|< BACK >|< LEFT >|< RIGHTD >	  )
	}

	void condition():
	{
	}
	{
	  (	    < FACING > | < CANPUT >| < CANPICK >| < CANMOVEINDIR>
	    |< CANJUMPINDIR>| < CANMOVETOTHE>| < CANJUMPTOTHE>
	  )
	}

	void not():
	{
	}
	{
	  < NOT >condition()
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	void comando():
	{
	}
	{
	 (	   < ASSIGNTO >|< GOTO >|< MOVE >|< TURN >|< FACE >|< PUTC >
	   |< PICKC >|< MOVETOTHE >|< MOVEINDIR >|< JUMPTOTHE >|< JUMPINDIR >|< NOP >
	   
	 ) 
	}

	void nop():
	{
	}
	{
	  (
	    ""	  )
	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */


	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	